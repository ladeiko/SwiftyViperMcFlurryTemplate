{% include 'header' %}

import XCTest
import CacheTracker
import ViperMcFlurryX

class {{ prefix }}{{ module_info.name }}PresenterTest: XCTestCase {

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    class MockInteractor: {{ prefix }}{{ module_info.name }}InteractorInput {

        // MARK: Vars

        private final var tracking = false

        // MARK: {{ prefix }}{{ module_info.name }}InteractorInput

        func isDeliveringModelsListChanges() -> Bool {
            return tracking
        }

        func startDeliveringModelsListChanges() {
            XCTAssertFalse(tracking)
            tracking = true
        }

        func stopDeliveringModelsListChanges() {
            tracking = false
        }

        func initialStateOfModelsList() -> [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>] {
            return []
        }

    }

    class MockRouter: {{ prefix }}{{ module_info.name }}RouterInput {

        weak var calleeOutput: (RamblerViperModuleOutput /* Add supported protocols here, e.g: & AnotherModuleOutput */)!
        weak var transitionHandler: RamblerViperModuleTransitionHandlerProtocol!

        // MARK: Vars
        // TODO

        // MARK: {{ prefix }}{{ module_info.name }}RouterInput

        func createEmbeddableModule(with model: {{ prefix }}{{ module_info.name }}ModuleEntityModel) -> {{ prefix }}{{ module_info.name }}EmbeddableModule {

            var module: {{ prefix }}{{ module_info.name }}EmbeddableModuleInput!
            var sourceViewController: UIViewController!
            var destinationViewController: UIViewController!

            transitionHandler.openModule!(usingFactory: {{ prefix }}{{ module_info.name }}EmbeddableModuleConfigurator()) { (sourceModuleTransitionHandler, destinationModuleTransitionHandler) in
                sourceViewController = sourceModuleTransitionHandler as! UIViewController
                destinationViewController = destinationModuleTransitionHandler as! UIViewController
            }.thenChain { (moduleInput) -> RamblerViperModuleOutput? in
                module = moduleInput as! {{ prefix }}{{ module_info.name }}EmbeddableModuleInput
                {% if custom_parameters.embeddable_extended_configure %}module.configure(with: {{ prefix }}{{ module_info.name }}EmbeddableModuleInput(model: model)){% else %}module.configure(){% endif %}
                return self.calleeOutput
            }

            let embedder: {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock = { containerView in
                assert(!destinationViewController.isViewLoaded || (destinationViewController.view.superview == nil))
                destinationViewController.willMove(toParentViewController: sourceViewController)
                sourceViewController.addChildViewController(destinationViewController)
                containerView.addSubview(destinationViewController.view)
                destinationViewController.didMove(toParentViewController: sourceViewController)
                let embeddedView = destinationViewController.view!
                embeddedView.translatesAutoresizingMaskIntoConstraints = false
                containerView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "H:|-0-[embeddedView]-0-|",
                                                                            options: NSLayoutFormatOptions(rawValue: 0),
                                                                            metrics: nil, views: ["embeddedView" : embeddedView]))
                containerView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "V:|-0-[embeddedView]-0-|",
                                                                            options: NSLayoutFormatOptions(rawValue: 0),
                                                                            metrics: nil, views: ["embeddedView" : embeddedView]))
                let remover: {{ prefix }}{{ module_info.name }}EmbeddableRemoveBlock = {
                    assert(destinationViewController.isViewLoaded && (destinationViewController.view.superview != nil))
                    destinationViewController.willMove(toParentViewController: nil)
                    destinationViewController.view.removeFromSuperview()
                    destinationViewController.removeFromParentViewController()
                }
                return remover
            }

            return {{ prefix }}{{ module_info.name }}EmbeddableModule(module: module, embed: embedder)
        }

    }

    class MockViewController: {{ prefix }}{{ module_info.name }}ViewInput {

        // MARK: Vars
        // TODO

        // MARK: {{ prefix }}{{ module_info.name }}ViewInput

        func loadInitialModelsList(_ state: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {

        }

        func applyModelsListChanges(_ changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {

        }

    }
}
