{% include 'header' %}

import XCTest
import CacheTracker
import ViperMcFlurryX

class {{ prefix }}{{ module_info.name }}PresenterTest: XCTestCase {

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    class MockInteractor: {{ prefix }}{{ module_info.name }}InteractorInput {

        // MARK: Vars

        private final var tracking = false

        // MARK: {{ prefix }}{{ module_info.name }}InteractorInput

        func isDeliveringModelsListChanges() -> Bool {
            return tracking
        }

        func startDeliveringModelsListChanges() {
            XCTAssertFalse(tracking)
            tracking = true
        }

        func stopDeliveringModelsListChanges() {
            tracking = false
        }

        func initialStateOfModelsList() -> [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>] {
            return []
        }

    }

    class MockRouter: {{ prefix }}{{ module_info.name }}RouterInput {

        weak var calleeOutput: (RamblerViperModuleOutput /* Add supported protocols here, e.g: & AnotherModuleOutput */)!
        weak var transitionHandler: RamblerViperModuleTransitionHandlerProtocol!

        // MARK: Vars
        // TODO

        // MARK: {{ prefix }}{{ module_info.name }}RouterInput

        func createEmbeddableModule(with model: {{ prefix }}{{ module_info.name }}ModuleEntityModel, lazyAllocation: Bool) -> {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock {

            let factory = {{ prefix }}{{ module_info.name }}EmbeddableModuleConfigurator()
            let configurationBlock: EmbeddedModuleConfigurationBlock = { (moduleInput) -> RamblerViperModuleOutput? in
                let moduleInput = moduleInput as! {{ prefix }}{{ module_info.name }}EmbeddableModuleInput
                moduleInput.configure()
                return nil // or self.calleeOutput
            }
            
            let nativeEmbedder = transitionHandler.createEmbeddableModule!(usingFactory: factory, configurationBlock: configurationBlock, lazyAllocation: lazyAllocation)!
            
            let embedder: {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock = { containerView in
                let nativeRemover = nativeEmbedder(containerView)!
                let  remover: {{ prefix }}{{ module_info.name }}EmbeddableRemoveBlock = {
                    nativeRemover()
                }
                return remover
            }
            
            return embedder
        }

    }

    class MockViewController: {{ prefix }}{{ module_info.name }}ViewInput {

        // MARK: Vars
        // TODO

        // MARK: {{ prefix }}{{ module_info.name }}ViewInput

        func loadInitialModelsList(_ state: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {

        }

        func applyModelsListChanges(_ changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {

        }

    }
}
