{% include 'header' %}

import XCTest
import CacheTracker
import ViperMcFlurryX

class {{ prefix }}{{ module_info.name }}PresenterTest: XCTestCase {

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    class MockInteractor: {{ prefix }}{{ module_info.name }}InteractorInput {

        // MARK: Vars

        private final var tracking = false

        // MARK: {{ prefix }}{{ module_info.name }}InteractorInput

        func isDeliveringModelsListChanges() -> Bool {
            return tracking
        }

        func startDeliveringModelsListChanges() {
            XCTAssertFalse(tracking)
            tracking = true
        }

        func stopDeliveringModelsListChanges() {
            tracking = false
        }

        func initialStateOfModelsList() -> [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>] {
            return []
        }

    }

    class MockRouter: {{ prefix }}{{ module_info.name }}RouterInput {

        weak var calleeOutput: (RamblerViperModuleOutput /* Add supported protocols here, e.g: & AnotherModuleOutput */)!
        weak var transitionHandler: RamblerViperModuleTransitionHandlerProtocol!

        // MARK: Vars
        // TODO

        // MARK: {{ prefix }}{{ module_info.name }}RouterInput

        func createEmbeddableModule(with model: {{ prefix }}{{ module_info.name }}ModuleEntityModel, lazyAllocation: Bool) -> {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock {

            var module: {{ prefix }}{{ module_info.name }}EmbeddableModuleInput!
            var sourceViewController: UIViewController!
            var destinationViewController: UIViewController!

            let allocate: () -> Void = {
                self.transitionHandler.openModule!(usingFactory: {{ prefix }}{{ module_info.name }}EmbeddableModuleConfigurator()) { (sourceModuleTransitionHandler, destinationModuleTransitionHandler) in
                    sourceViewController = sourceModuleTransitionHandler as! UIViewController
                    destinationViewController = destinationModuleTransitionHandler as! UIViewController
                }.thenChain { (moduleInput) -> RamblerViperModuleOutput? in
                    module = moduleInput as! {{ prefix }}{{ module_info.name }}EmbeddableModuleInput
                    module.configure()
                    return self.calleeOutput
                }
            }
            
            let embedder: {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock = { containerView in
                
                if lazyAllocation && destinationViewController == nil {
                    allocate()
                }
                
                let remover: {{ prefix }}{{ module_info.name }}EmbeddableRemoveBlock = {
                    guard destinationViewController.isViewLoaded && destinationViewController.view.superview == containerView else {
                        return
                    }
                    destinationViewController.willMove(toParentViewController: nil)
                    destinationViewController.view.removeFromSuperview()
                    destinationViewController.removeFromParentViewController()
                }
                
                let setupConstraints: () -> Void = {
                    let embeddedView = destinationViewController.view!
                    embeddedView.translatesAutoresizingMaskIntoConstraints = false
                    containerView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "H:|-0-[embeddedView]-0-|",
                                                                                options: NSLayoutFormatOptions(rawValue: 0),
                                                                                metrics: nil, views: ["embeddedView" : embeddedView]))
                    containerView.addConstraints(NSLayoutConstraint.constraints(withVisualFormat: "V:|-0-[embeddedView]-0-|",
                                                                                options: NSLayoutFormatOptions(rawValue: 0),
                                                                                metrics: nil, views: ["embeddedView" : embeddedView]))
                }
                
                if destinationViewController.isViewLoaded && destinationViewController.view.superview != nil {
                    
                    if destinationViewController.parent == sourceViewController { // parent controller is the same
                        
                        if destinationViewController.view.superview == containerView { // and view is the same
                            return remover
                        }
                        
                        containerView.addSubview(destinationViewController.view)
                        setupConstraints()
                        return remover
                    }
                    else {
                        destinationViewController.willMove(toParentViewController: nil)
                        destinationViewController.view.removeFromSuperview()
                        destinationViewController.removeFromParentViewController()
                    }
                }
                
                destinationViewController.willMove(toParentViewController: sourceViewController)
                sourceViewController.addChildViewController(destinationViewController)
                containerView.addSubview(destinationViewController.view)
                destinationViewController.didMove(toParentViewController: sourceViewController)
                setupConstraints()
                return remover
            }
            
            if !lazyAllocation {
                allocate()
            }

            return embedder
        }

    }

    class MockViewController: {{ prefix }}{{ module_info.name }}ViewInput {

        // MARK: Vars
        // TODO

        // MARK: {{ prefix }}{{ module_info.name }}ViewInput

        func loadInitialModelsList(_ state: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {

        }

        func applyModelsListChanges(_ changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {

        }

    }
}
