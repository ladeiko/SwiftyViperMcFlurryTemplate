{% include 'header' %}

import UIKit

class {{ prefix }}{{ module_info.name }}ModuleConfigurator {

    func configureModuleForViewInput<UIViewController>(viewInput: UIViewController) {

        if let viewController = viewInput as? {{ prefix }}{{ module_info.name }}ViewController {
            configure(viewController: viewController)
        }
    }

    private func configure(viewController: {{ prefix }}{{ module_info.name }}ViewController) {

        guard viewController.output == nil else { // prevent double configuration
            return
        }

        let router = {{ prefix }}{{ module_info.name }}Router()

        let presenter = {{ prefix }}{{ module_info.name }}Presenter()
        presenter.view = viewController
        presenter.router = router

        let interactor = {{ prefix }}{{ module_info.name }}Interactor()
        interactor.output = presenter

        presenter.interactor = interactor
        viewController.output = presenter

        viewController.viewControllers = [
        /*
            UINavigationController(rootViewController: SomeModuleConfigurator1().create()),
            UINavigationController(rootViewController: SomeModuleConfigurator2().create()),
        */
        ]
        
        viewController.viewControllers?.forEach({ (childViewController) in
            if let navigationController = childViewController as? UINavigationController {
                // Propagate tabBarItem of child to the navigation controller
                childViewController.tabBarItem = navigationController.viewControllers[0].tabBarItem
            }
        })
        
        viewController.output.viewIsReady()
    }

    func create() -> UIViewController {
        let viewController = {{ prefix }}{{ module_info.name }}ViewController()
        configureModuleForViewInput(viewInput: viewController)
        return viewController
    }
    
}
