{% include 'header' %}

import UIKit
import OnDeallocateX
{% if  custom_parameters.extended_configurator_create != 'true' %}import ViperMcFlurryX{% endif %}

{% if custom_parameters.extended_configurator_create and custom_parameters.extended_configure %}
class {{ prefix }}{{ module_info.name }}ModuleConfigurator {
{% else %}   
class {{ prefix }}{{ module_info.name }}ModuleConfigurator: NSObject, RamblerViperModuleFactoryProtocol {
{% endif %}

    func configureModuleForViewInput<UIViewController>(viewInput: UIViewController{% if custom_parameters.extended_configurator_create and custom_parameters.extended_configure %}, with config: {{ prefix }}{{ module_info.name }}ModuleConfig{% endif %}) {
        if let viewController = viewInput as? {{ prefix }}{{ module_info.name }}ViewController {
            {% if custom_parameters.extended_configurator_create and custom_parameters.extended_configure %}
            configure(viewController: viewController, with: config)
            {% else %}
            configure(viewController: viewController)
            {% endif -%}
        }
    }

    private func configure(viewController: {{ prefix }}{{ module_info.name }}ViewController{% if custom_parameters.extended_configurator_create and custom_parameters.extended_configure %}, with config: {{ prefix }}{{ module_info.name }}ModuleConfig{% endif %}) {

        guard viewController.output == nil else { // prevent double configuration
            return
        }

        let router = {{ prefix }}{{ module_info.name }}Router()

        let presenter = {{ prefix }}{{ module_info.name }}Presenter()
        presenter.view = viewController
        presenter.router = router

        let interactor = {{ prefix }}{{ module_info.name }}Interactor()
        interactor.output = presenter

        presenter.interactor = interactor
        viewController.output = presenter
        viewController.moduleInput = presenter

        router.transitionHandler = viewController
        router.calleeOutput = presenter

        viewController.onWillDeallocate {
            presenter.willDeinit()
        }
        {% if custom_parameters.extended_configurator_create and custom_parameters.extended_configure %}
        presenter.configure(with: config)
        {% endif %}
    }

    func create({% if custom_parameters.extended_configurator_create and custom_parameters.extended_configure %}with config: {{ prefix }}{{ module_info.name }}ModuleConfig{% endif %}) -> UIViewController {
        let storyboard = UIStoryboard(name: "{{ prefix }}{{ module_info.name }}", bundle: nil)
        let viewController = storyboard.instantiateInitialViewController() as! {{ prefix }}{{ module_info.name }}ViewController
        {% if custom_parameters.extended_configurator_create and custom_parameters.extended_configure %}
        configureModuleForViewInput(viewInput: viewController, with: config)
        {% else %}
        configureModuleForViewInput(viewInput: viewController)
        {% endif %}    
        return viewController
    }

    {%- if custom_parameters.extended_configurator_create != 'true' %}
    // MARK: - RamblerViperModuleFactoryProtocol

    func instantiateModuleTransitionHandler() -> RamblerViperModuleTransitionHandlerProtocol? {
        return create()
    }
    {% endif %}
}
