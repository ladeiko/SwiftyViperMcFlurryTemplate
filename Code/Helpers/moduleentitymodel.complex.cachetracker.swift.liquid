{% include 'header' %}

import UIKit
import CacheTrackerConsumer

// TODO: Replace SomeModuleEntityModel with project model implementing CacheTracker/CacheTrackerPlainModel protocol
// Example:
//  import CacheTracker
//  class SomeModuleEntityModel: CacheTrackerPlainModel {
//      // MARK: - CacheTrackerPlainModel
//      required init() {}
//  }
//  More info at https://github.com/ladeiko/CacheTracker

typealias {{ prefix }}{{ module_info.name }}ModuleEntityModel = SomeModuleEntityModel

class {{ prefix }}{{ module_info.name }}ModuleEmbeddableModel: CacheTrackerPlainRecurrentConsumerItem, {{ prefix }}{{ module_info.name }}Embeddable {

    let model: {{ prefix }}{{ module_info.name }}ModuleEntityModel!

    // MARK: - CacheTrackerPlainModel

    required init() {
        model = nil
        embed = nil
    }

    // MARK: - CacheTrackerPlainRecurrentConsumerItem

    func recurrentPlainConsumerItem(using oldValue: CacheTrackerPlainRecurrentConsumerItem) -> CacheTrackerPlainRecurrentConsumerItem {
        let oldValue = oldValue as! {{ prefix }}{{ module_info.name }}ModuleEmbeddableModel
        return {{ prefix }}{{ module_info.name }}ModuleEmbeddableModel(model: model, embed: oldValue.embed)
    }

    // MARK: - {{ prefix }}{{ module_info.name }}Embeddable

    let embed: {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock!

    // MARK: - Life cycle

    init(model: {{ prefix }}{{ module_info.name }}ModuleEntityModel) {
        self.model = model
        self.embed = nil
    }

    init(model: {{ prefix }}{{ module_info.name }}ModuleEntityModel, embed: @escaping {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock) {
        self.model = model
        self.embed = embed
    }

}
