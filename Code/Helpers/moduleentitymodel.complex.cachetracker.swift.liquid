{% include 'header' %}

import UIKit
import CacheTracker

// TODO: Replace SomeModuleEntityModel with project model implementing CacheTracker/CacheTrackerPlainModel protocol
// Example:
//  import CacheTracker
//  class SomeModuleEntityModel: CacheTrackerPlainModel {
//      // MARK: CacheTrackerPlainModel
//      required init() {}
//  }
//  More info at https://github.com/ladeiko/CacheTracker

typealias {{ prefix }}{{ module_info.name }}ModuleEntityModel = SomeModuleEntityModel

protocol {{ prefix }}{{ module_info.name }}ModulePlainModelUnique {

    // Should return value unique among all items of the same type, e.g.: id, name, etc...
    func uniqueKeyValue() -> String

}

class {{ prefix }}{{ module_info.name }}ModuleEmbeddableModel: CacheTrackerPlainModel, {{ prefix }}{{ module_info.name }}Embeddable {

    let model: {{ prefix }}{{ module_info.name }}ModuleEntityModel!

    // MARK: CacheTrackerPlainModel

    required init() {
        model = nil
        embed = nil
    }

    // MARK: {{ prefix }}{{ module_info.name }}Embeddable

    let embed: {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock!

    // MARK: Life cycle

    init(model: {{ prefix }}{{ module_info.name }}ModuleEntityModel) {
        self.model = model
        self.embed = nil
    }

    init(model: {{ prefix }}{{ module_info.name }}ModuleEntityModel, embed: @escaping {{ prefix }}{{ module_info.name }}EmbeddableEmbedBlock) {
        self.model = model
        self.embed = embed
    }

}

extension {{ prefix }}{{ module_info.name }}ModuleEntityModel: {{ prefix }}{{ module_info.name }}ModulePlainModelUnique {

    // Should return value unique among all items of the same type, e.g.: id, name, etc...
    func uniqueKeyValue() -> String {
        return xxx // TODO Change xxx to proper property
    }

}
