{% include 'header' %}

import UIKit
import CacheTracker
import CacheTrackerConsumer

class {{ prefix }}{{ module_info.name }}ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, {{ prefix }}{{module_info.name}}ViewInput {

    // MARK: - VIPER Vars

    var output: {{ prefix }}{{ module_info.name }}ViewOutput!

    // MARK: - Outlets

    @IBOutlet weak var collectionView: UICollectionView!

    // MARK: - Vars

    private final let consumer: CacheTrackerPlainRecurrentConsumer<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel> = CacheTrackerPlainRecurrentConsumer<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>()

    // MARK: - Life cycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupCollectioView()
        setupConsumer()
        output.viewIsReady()
    }

    // MARK: - {{ prefix }}{{module_info.name}}ViewInput

    func loadInitialModelsList(_ state: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {
        consumer.reset(with: state)
        if let collectionView = collectionView {
            collectionView.performBatchUpdates({
                collectionView.reloadSections(IndexSet(integer: 0))
            }, completion:  { _ in
                if self.consumer.numberOfItems() > 0 {
                    collectionView.layoutIfNeeded()
                    collectionView.scrollRectToVisible(CGRect(x: 0, y: 0, width: 1, height: 0), animated: true)
                }
            })
        }
    }

    func applyModelsListChanges(_ changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]) {
        consumer.willChange()
        consumer.consume(transactions: changes)
        consumer.didChange()
    }

    // MARK: - UI Actions
    // TODO: Place your code here

    // MARK: - UICollectionViewDataSource

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return consumer.numberOfItems()
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Default", for: indexPath) as! {{ prefix }}{{ module_info.name }}ViewCell
        let item = consumer.object(at: indexPath.row)
        cell.configure(with: item.model)
        return cell
    }

    // MARK: - UICollectionViewDelegate

    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        let cell = cell as! {{ prefix }}{{ module_info.name }}ViewCell
        let item = consumer.object(at: indexPath.row)
        cell.willDisplay(item)
    }

    func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        let cell = cell as! {{ prefix }}{{ module_info.name }}ViewCell
        cell.stopDisplay()
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        //let item = consumer.object(at: indexPath.row)
        // TODO: Place your code here
    }

    // MARK: - Helpers

    private final func setupConsumer() {
        consumer.delegate = collectionView
    }

    private final func setupCollectioView() {
        // TODO: Place your code here
    }

}
