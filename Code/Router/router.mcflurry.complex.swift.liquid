{% include 'header' %}

import ViperMcFlurryX

class {{ prefix }}{{ module_info.name }}Router: {{ prefix }}{{ module_info.name }}RouterInput {

    // MARK: VIPER Vars

    weak var calleeOutput: (RamblerViperModuleOutput /* Add supported protocols here, e.g: & AnotherModuleOutput */)!
    weak var transitionHandler: RamblerViperModuleTransitionHandlerProtocol!

    // MARK: Vars
    // TODO

    // MARK: {{ prefix }}{{ module_info.name }}RouterInput

    func createEmbeddableModule(with model: {{ prefix }}{{ module_info.name }}ModuleEntityModel) -> {{ prefix }}{{ module_info.name }}EmbeddableModule {

        var module: CategoryPreviewModuleInput!
        var sourceViewController: UIViewController!
        var destinationViewController: UIViewController!
        
        transitionHandler.openModule!(usingFactory: CategoryPreviewModuleConfigurator()) { (sourceModuleTransitionHandler, destinationModuleTransitionHandler) in
            
            sourceViewController = sourceModuleTransitionHandler as! UIViewController
            destinationViewController = destinationModuleTransitionHandler as! UIViewController
            
            }.thenChain { (moduleInput) -> RamblerViperModuleOutput? in
                module = moduleInput as! CategoryPreviewModuleInput
                (moduleInput as! CategoryPreviewModuleInput).configure(with: category, using: services)
                return self.calleeOutput
        }
        
        let embedder: CategoryPreviewModuleEmbedder = { view in
            
            assert(!destinationViewController.isViewLoaded || (destinationViewController.view.superview == nil))
            
            destinationViewController.willMove(toParentViewController: sourceViewController)
            sourceViewController.addChildViewController(destinationViewController)
            destinationViewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
            destinationViewController.view.frame = view.bounds
            view.addSubview(destinationViewController.view)
            destinationViewController.didMove(toParentViewController: sourceViewController)
        }
        
        let detacher: CategoryPreviewModuleDetacher = {
            
            assert(destinationViewController.isViewLoaded && (destinationViewController.view.superview != nil))
            
            destinationViewController.willMove(toParentViewController: nil)
            destinationViewController.view.removeFromSuperview()
            destinationViewController.removeFromParentViewController()
        }
        
        return CategoryPreviewModuleEmbeddableDescription(module: module, embedder: embedder, detacher: detacher)
        
    }
    
    /*  // Example
    func dismiss() {
        transitionHandler.closeCurrentModule!(true)
    }
    */

    /* // Example
    func showSomeModule() {
        transitionHandler.openModule!(usingFactory: SomeModuleConfigurator()) { (sourceModuleTransitionHandler, destinationModuleTransitionHandler) in
            
            let sourceViewController = sourceModuleTransitionHandler as! UIViewController
            let destinationViewController = destinationModuleTransitionHandler as! UIViewController
            
            sourceViewController.present(destinationViewController, animated: true, completion: nil)
            
            }.thenChain { (moduleInput) -> RamblerViperModuleOutput? in
                (moduleInput as! SomeModuleInput).configure()
                return nil // or self.calleeOutput
        }
    }
    */

    // MARK: Helpers
    // TODO

}
