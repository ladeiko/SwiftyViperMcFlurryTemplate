{% include 'header' %}

import {% if custom_parameters.mcflurry_swift %}ViperMcFlurryX_Swift{% else %}ViperMcFlurryX{% endif %}

class {{ prefix }}{{ module_info.name }}Router: {{ prefix }}{{ module_info.name }}RouterInput {

    // MARK: - VIPER Vars

    weak var calleeOutput: ({% if custom_parameters.mcflurry_swift != "true" %}Rambler{% endif %}ViperModuleOutput /* Add supported protocols here, e.g: & AnotherModuleOutput */)!
    weak var transitionHandler: {% if custom_parameters.mcflurry_swift != "true" %}Rambler{% endif %}ViperModuleTransitionHandler{% if custom_parameters.mcflurry_swift != "true" %}Protocol{% endif %}!

    // MARK: - Vars
    // TODO: Place your code here

    // MARK: - {{ prefix }}{{ module_info.name }}RouterInput

    /*  // Example
    func dismiss() {
        transitionHandler.closeCurrentModule{% if custom_parameters.mcflurry_swift != "true" %}!{% endif %}(true)
    }
    */

    /* // Example
    func showSomeModule() {
        transitionHandler.openModule{% if custom_parameters.mcflurry_swift != "true" %}!{% endif %}(usingFactory: SomeModuleConfigurator()) { (sourceModuleTransitionHandler, destinationModuleTransitionHandler) in

            let sourceViewController = sourceModuleTransitionHandler as! UIViewController
            let destinationViewController = destinationModuleTransitionHandler as! UIViewController

            sourceViewController.present(destinationViewController, animated: true, completion: nil)

        }.thenChain { (moduleInput) -> {% if custom_parameters.mcflurry_swift != "true" %}Rambler{% endif %}ViperModuleOutput? in
            (moduleInput as! SomeModuleInput).configure()
            return nil // or self.calleeOutput
        }
    }
    */

    // MARK: - Helpers
    // TODO: Place your code here

}
