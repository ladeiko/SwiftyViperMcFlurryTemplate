{% include 'header' %}

import Foundation
import ViperMcFlurryX
import CacheTracker

fileprivate enum {{ prefix }}{{ module_info.name }}PresenterState {
    case initial
    case ready
    case deinitialized
}

class {{ prefix }}{{ module_info.name }}Presenter: NSObject, RamblerViperModuleInput, {{ prefix }}{{ module_info.name }}ModuleInput, {{ prefix }}{{ module_info.name }}ViewOutput, {{ prefix }}{{ module_info.name }}InteractorOutput, RamblerViperModuleOutput {

    // MARK: - VIPER Vars

    weak var view: {{ prefix }}{{ module_info.name }}ViewInput!
    var interactor: {{ prefix }}{{ module_info.name }}InteractorInput!
    var router: {{ prefix }}{{ module_info.name }}RouterInput!
    weak var output: {{ prefix }}{{module_info.name}}ModuleOutput?
    private final var state: {{ prefix }}{{ module_info.name }}PresenterState = .initial

    // MARK: - Vars
    
        {% if custom_parameters.extended_configure %}private final var config: {{ prefix }}{{ module_info.name }}ModuleInputConfig!{% else %}// TODO: Place your code here{% endif %}

    // MARK: - Life cycle

    func willDeinit() {
        if state == .ready {
            if interactor.isDeliveringModelsListChanges() {
                interactor.stopDeliveringModelsListChanges()
            }
            // TODO: Place your code here
        }
        state = .deinitialized
    }

    // MARK: - RamblerViperModuleInput

    func setModuleOutput(_ moduleOutput: RamblerViperModuleOutput!) {
        output = moduleOutput as? {{ prefix }}{{module_info.name}}ModuleOutput
    }

    // MARK: - {{ prefix }}{{module_info.name}}ViewOutput

    func viewIsReady() {
        assert(state == .ready)
        if !interactor.isDeliveringModelsListChanges() {
            interactor.startDeliveringModelsListChanges()
        }
        else {
            let initialState = interactor.initialStateOfModelsList()
            view.loadInitialModelsList(adaptModels(initialState))
        }
        // TODO: Place your code here
    }

    // MARK: - {{ prefix }}{{module_info.name}}ModuleInput

    {% if custom_parameters.extended_configure %}func configure(with config: {{ prefix }}{{ module_info.name }}ModuleInputConfig) {% else %}func configure() {% endif %}{
        assert(state == .initial)
        state = .ready
        {% if custom_parameters.extended_configure %}
        self.config = config
        interactor.configure(with: config)
        {% else %}interactor.configure(){% endif %}
    }

    // MARK: - {{ prefix }}{{ module_info.name }}InteractorOutput

    func modelsListDidReset(_ initialState: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]) {
        guard state == .ready else { return }
        view.loadInitialModelsList(adaptModels(initialState))
    }

    func modelsListDidChange(_ changes: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]) {
        guard state == .ready else { return }
        view.applyModelsListChanges(adaptModels(changes))
    }

    // MARK: - Helpers

    private func adaptModels(_ list: [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEntityModel>]) -> [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>] {
        var result = [CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>]()
        for item in list {
            switch item.type {
            // we use CacheTrackerPlainRecurrentConsumer, so we
            // have to associate embeddable module only for insertions
            case .insert:
                let embedder = router.createEmbeddableModule(with: item.model!, lazyAllocation: false)
                let newModel = {{ prefix }}{{ module_info.name }}ModuleEmbeddableModel(model: item.model!, embed: embedder)
                result.append(CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>(model: newModel, index: item.index, newIndex: item.newIndex, type: item.type))

            default:
                if let model = item.model {
                    let newModel = {{ prefix }}{{ module_info.name }}ModuleEmbeddableModel(model: model)
                    result.append(CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>(model: newModel, index: item.index, newIndex: item.newIndex, type: item.type))
                }
                else {
                    result.append(CacheTransaction<{{ prefix }}{{ module_info.name }}ModuleEmbeddableModel>(model: nil, index: item.index, newIndex: item.newIndex, type: item.type))
                }
            }
        }
        return result
    }

}
