{% include 'header' %}

import Foundation

fileprivate enum {{ prefix }}{{ module_info.name }}PresenterState {
    case initial
    case ready
    case deinitialized
}

class {{ prefix }}{{ module_info.name }}Presenter: NSObject, {{ prefix }}{{ module_info.name }}ModuleInput, {{ prefix }}{{ module_info.name }}ViewOutput, {{ prefix }}{{ module_info.name }}InteractorOutput {

    // MARK: VIPER Vars

    weak var view: {{ prefix }}{{ module_info.name }}ViewInput!
    var interactor: {{ prefix }}{{ module_info.name }}InteractorInput!
    var router: {{ prefix }}{{ module_info.name }}RouterInput!
    private final var state: {{ prefix }}{{ module_info.name }}PresenterState = .initial

    // MARK: Vars
    // TODO

    // MARK: Life cycle

    func willDeinit() {
        if state == .ready {
            // TODO
        }
        state = .deinitialized
    }

    // MARK: {{ prefix }}{{module_info.name}}ViewOutput

    func viewIsReady() {
        assert(state == .ready)
        // TODO
    }

    // MARK: {{ prefix }}{{module_info.name}}ModuleInput
    {% if custom_parameters.extended_configure %}
    func configure(with config: {{ prefix }}{{ module_info.name }}ModuleConfig) {
    {% else %}
    func configure() {
        {% endif -%}
        assert(state == .initial)
        state = .ready
        // TODO
    }

    // MARK: {{ prefix }}{{ module_info.name }}InteractorOutput
    // TODO
}
