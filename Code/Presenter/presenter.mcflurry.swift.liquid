{% include 'header' %}

import Foundation
import {% if custom_parameters.mcflurry_swift %}ViperMcFlurryX_Swift{% else %}ViperMcFlurryX{% endif %}

fileprivate enum {{ prefix }}{{ module_info.name }}PresenterState {
    case initial
    case ready(isViewReady: Bool)
    case deinitialized
}

class {{ prefix }}{{ module_info.name }}Presenter: {% if custom_parameters.mcflurry_swift != "true" %}NSObject,{% endif %} {% if custom_parameters.mcflurry_swift != "true" %}Rambler{% endif %}ViperModuleInput, {{ prefix }}{{ module_info.name }}ModuleInput, {{ prefix }}{{ module_info.name }}ViewOutput, {{ prefix }}{{ module_info.name }}InteractorOutput, {% if custom_parameters.mcflurry_swift != "true" %}Rambler{% endif %}ViperModuleOutput {

    // MARK: - VIPER Vars

    weak var view: {{ prefix }}{{ module_info.name }}ViewInput!
    var interactor: {{ prefix }}{{ module_info.name }}InteractorInput!
    var router: {{ prefix }}{{ module_info.name }}RouterInput!
    weak var output: {{ prefix }}{{module_info.name}}ModuleOutput?
    private final var state: {{ prefix }}{{ module_info.name }}PresenterState = .initial

    // MARK: - Vars

    {% if custom_parameters.extended_configure %}private final var config: {{ prefix }}{{ module_info.name }}ModuleInputConfig!{% else %}// TODO: Place your code here{% endif %}

    // MARK: - Life cycle

    func willDeinit() {
        if case .ready = state {
            interactor.deinitialize()
            // TODO: Place your code here
        }
        state = .deinitialized
    }

    // MARK: - {% if custom_parameters.mcflurry_swift != "true" %}Rambler{% endif %}ViperModuleInput

    func setModuleOutput(_ moduleOutput: {% if custom_parameters.mcflurry_swift != "true" %}Rambler{% endif %}ViperModuleOutput{% if custom_parameters.mcflurry_swift != "true" %}!{% endif %}) {
        output = moduleOutput as? {{ prefix }}{{module_info.name}}ModuleOutput
    }

    // MARK: - {{ prefix }}{{module_info.name}}ViewOutput

    func viewIsReady() {
        switch state {
        case let .ready(isViewReady):
            assert(!isViewReady)
            state = .ready(isViewReady: true)
        default:
            fatalError()
        }
        // TODO: Place your code here
    }

    // MARK: - {{ prefix }}{{module_info.name}}ModuleInput

    {% if custom_parameters.extended_configure %}func configure(with config: {{ prefix }}{{ module_info.name }}ModuleInputConfig) {% else %}func configure() {% endif %}{
        switch state {
        case .initial:
            state = .ready(isViewReady: false)
        default:
            fatalError()
        }
        {% if custom_parameters.extended_configure %}
        self.config = config
        interactor.configure(with: config)
        {% else %}interactor.configure(){% endif %}
    }

    // MARK: - {{ prefix }}{{ module_info.name }}InteractorOutput
    // TODO: Place your code here

    // MARK: - Helpers
    // TODO: Place your code here
}
